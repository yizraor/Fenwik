#pragma once

// простейшая реализация дерева Фенвика
class Fenwik
{
protected:
	int size;   // кол-во элементов исходных данных
	int* data;  // данные дерева Фенвика
public:
	// конструктор дерева Фенвика: на входе - исходный массив значений, по которому будут считаться частичные суммы
	Fenwik(int src_size, int* src_array);
	// дополнительный конструктор для копирования существующего дерева
	Fenwik(Fenwik & src);
	// деструктор
	~Fenwik();

	// получить размер массива
	int get_size();

	// обновление дерева в связи с изменением элемента исходного массива
	void modify_value(int idx, int add_value);

	// получение префиксной суммы, по элементам от 0 до "idx" (включительно)
	int sum_prefix(int idx);

	// получение суммы элементов исходного массива с индексами от "idx_left" до "idx_right" (включительно)
	int sum_range(int idx_left, int idx_right);

	// расчет значения элемента исходного массива, на основе данных дерева
	int compute_value(int idx);

	// заполнение параметра-массива префиксными суммами для элементов от "idx_left" до "idx_right" (включительно)
	int* sum_prefixes(int idx_left, int idx_right, int* ret);

	// изменение набора значений исходного массива данных с индексами от "idx_left" по "idx_right' (включительно)
	// кстати, реализация легко модифицируется под приём массива значений (int* add_values) для индивидуальной модификации каждого элемента
	void modify_values(int idx_left, int idx_right, int add_value);

	// присвоение константного значения элементу исходного массива
	void set_value(int idx, int new_value);

	// присвоение константных значений элементам исходного массива в диапазоне индексов от "idx_left" до "idx_right" (включительно)
	// кстати, реализация легко модифицируется под приём массива разных константных значений (int* new_values) для индивидуального присвоения каждого элемента
	void set_values(int idx_left, int idx_right, int new_value);
};
